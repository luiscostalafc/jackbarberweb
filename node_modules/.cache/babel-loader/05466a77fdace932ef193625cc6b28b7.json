{"ast":null,"code":"import _slicedToArray from \"/var/www/jackbarber/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/jackbarber/frontend/src/pages/Dashboard/index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, setMilliseconds, isBefore, isEqual, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        schedule = _useState4[0],\n        setSchedule = _useState4[1];\n\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setMilliseconds(setSeconds(setMinutes(setHours(date, hour), 0), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: \"\".concat(hour, \":00h\"),\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n      console.tron.log(data);\n    }\n\n    loadSchedule();\n  }, [date]); //eslint-disable-line\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlePrevDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(MdChevronLeft, {\n    size: 36,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, dateFormatted), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleNextDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(MdChevronRight, {\n    size: 36,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["/var/www/jackbarber/frontend/src/pages/Dashboard/index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","setMilliseconds","isBefore","isEqual","parseISO","utcToZonedTime","pt","MdChevronLeft","MdChevronRight","api","Container","Time","range","Dashboard","Date","date","setDate","schedule","setSchedule","dateFormatted","locale","loadSchedule","response","get","params","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","find","a","console","tron","log","handlePrevDay","handleNextDay","user","name"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n\tformat,\n\tsubDays,\n\taddDays,\n\tsetHours,\n\tsetMinutes,\n\tsetSeconds,\n\tsetMilliseconds,\n\tisBefore,\n\tisEqual,\n\tparseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n\tconst [date, setDate] = useState(new Date());\n\tconst [schedule, setSchedule] = useState([]);\n\n\tconst dateFormatted = useMemo(\n\t\t() => format(date, \"d 'de' MMMM\", { locale: pt }),\n\t\t[date]\n\t);\n\n\tuseEffect(() => {\n\t\tasync function loadSchedule() {\n\t\t\tconst response = await api.get('schedule', {\n\t\t\t\tparams: { date },\n\t\t\t});\n\n\t\t\tconst timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n\t\t\tconst data = range.map(hour => {\n\t\t\t\tconst checkDate = setMilliseconds(\n\t\t\t\t\tsetSeconds(setMinutes(setHours(date, hour), 0), 0),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tconst compareDate = utcToZonedTime(checkDate, timezone);\n\n\t\t\t\treturn {\n\t\t\t\t\ttime: `${hour}:00h`,\n\t\t\t\t\tpast: isBefore(compareDate, new Date()),\n\t\t\t\t\tappointment: response.data.find(a =>\n\t\t\t\t\t\tisEqual(parseISO(a.date), compareDate)\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tsetSchedule(data);\n\t\t\tconsole.tron.log(data);\n\t\t}\n\n\t\tloadSchedule();\n\t}, [date]); //eslint-disable-line\n\n\tfunction handlePrevDay() {\n\t\tsetDate(subDays(date, 1));\n\t}\n\n\tfunction handleNextDay() {\n\t\tsetDate(addDays(date, 1));\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<header>\n\t\t\t\t<button type=\"button\" onClick={handlePrevDay}>\n\t\t\t\t\t<MdChevronLeft size={36} color=\"#fff\" />\n\t\t\t\t</button>\n\t\t\t\t<strong>{dateFormatted}</strong>\n\t\t\t\t<button type=\"button\" onClick={handleNextDay}>\n\t\t\t\t\t<MdChevronRight size={36} color=\"#fff\" />\n\t\t\t\t</button>\n\t\t\t</header>\n\n\t\t\t<ul>\n\t\t\t\t{schedule.map(time => (\n\t\t\t\t\t<Time key={time.time} past={time.past} available={!time.appointment}>\n\t\t\t\t\t\t<strong>{time.time}</strong>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{time.appointment ? time.appointment.user.name : 'Em aberto'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Time>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}