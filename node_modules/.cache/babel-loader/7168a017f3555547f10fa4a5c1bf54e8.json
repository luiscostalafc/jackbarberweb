{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport history from \"../../../services/history\";\nimport { signInSuccess, signFailure, signUpSuccess } from './actions';\nexport function* singIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, '/sessions', {\n      email,\n      password\n    });\n    const _response$data = response.data,\n          token = _response$data.token,\n          user = _response$data.user;\n\n    if (!user.provider) {\n      toast.error('Usuário não é prestador');\n      return;\n    }\n\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function* singUp({\n  payload\n}) {\n  try {\n    const name = payload.name,\n          email = payload.email,\n          password = payload.password,\n          phone = payload.phone,\n          zipcode = payload.zipcode,\n          street = payload.street,\n          number = payload.number,\n          complement = payload.complement,\n          district = payload.district,\n          city = payload.city,\n          state = payload.state;\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      phone,\n      zipcode,\n      street,\n      number,\n      complement,\n      district,\n      city,\n      state,\n      provider: true\n    });\n    yield put(signUpSuccess());\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro, verifique seus dados!');\n    yield put(signFailure());\n  }\n}\n\nfunction setToken({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', singIn), takeLatest('@auth/SIGN_UP_REQUEST', singUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/var/www/jackbarber/frontend/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","api","history","signInSuccess","signFailure","signUpSuccess","singIn","payload","email","password","response","post","data","token","user","provider","error","defaults","headers","Authorization","push","err","singUp","name","phone","zipcode","street","number","complement","district","city","state","setToken","auth","signOut"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '~/services/api';\nimport history from '~/services/history';\n\nimport { signInSuccess, signFailure, signUpSuccess } from './actions';\n\nexport function* singIn({ payload }) {\n\ttry {\n\t\tconst { email, password } = payload;\n\n\t\tconst response = yield call(api.post, '/sessions', {\n\t\t\temail,\n\t\t\tpassword,\n\t\t});\n\n\t\tconst { token, user } = response.data;\n\n\t\tif (!user.provider) {\n\t\t\ttoast.error('Usuário não é prestador');\n\t\t\treturn;\n\t\t}\n\n\t\tapi.defaults.headers.Authorization = `Bearer ${token}`;\n\n\t\tyield put(signInSuccess(token, user));\n\n\t\thistory.push('/dashboard');\n\t} catch (err) {\n\t\ttoast.error('Falha na autenticação, verifique seus dados');\n\t\tyield put(signFailure());\n\t}\n}\n\nexport function* singUp({ payload }) {\n\ttry {\n\t\tconst { name, email, password, phone, zipcode, street,\n\t\tnumber, complement, district, city, state } = payload;\n\n\t\tyield call(api.post, 'users', {\n\t\t\tname,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tphone,\n\t\t\tzipcode,\n\t\t\tstreet,\n\t\t\tnumber,\n\t\t\tcomplement,\n\t\t\tdistrict,\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tprovider: true,\n\t\t});\n\t\tyield put(signUpSuccess());\n\n\t\thistory.push('/');\n\t} catch (err) {\n\t\ttoast.error('Falha no cadastro, verifique seus dados!');\n\n\t\tyield put(signFailure());\n\t}\n}\n\nfunction setToken({ payload }) {\n\tif (!payload) return;\n\n\tconst { token } = payload.auth;\n\n\tif (token) {\n\t\tapi.defaults.headers.Authorization = `Bearer ${token}`;\n\t}\n}\n\nexport function signOut() {\n\thistory.push('/');\n}\n\nexport default all([\n\ttakeLatest('persist/REHYDRATE', setToken),\n\ttakeLatest('@auth/SIGN_IN_REQUEST', singIn),\n\ttakeLatest('@auth/SIGN_UP_REQUEST', singUp),\n\ttakeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}