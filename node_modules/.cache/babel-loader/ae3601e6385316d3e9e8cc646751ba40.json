{"ast":null,"code":"import _defineProperty from \"/var/www/jackbarber/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/var/www/jackbarber/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport { updateProfileSuccess, updateProfileFailure } from './actions';\nexport function* updateProfile({\n  payload\n}) {\n  try {\n    const _payload$data = payload.data,\n          name = _payload$data.name,\n          email = _payload$data.email,\n          avatar_id = _payload$data.avatar_id,\n          phone = _payload$data.phone,\n          zipcode = _payload$data.zipcode,\n          street = _payload$data.street,\n          number = _payload$data.number,\n          complement = _payload$data.complement,\n          district = _payload$data.district,\n          city = _payload$data.city,\n          state = _payload$data.state,\n          rest = _objectWithoutProperties(_payload$data, [\"name\", \"email\", \"avatar_id\", \"phone\", \"zipcode\", \"street\", \"number\", \"complement\", \"district\", \"city\", \"state\"]);\n\n    const profile = _objectSpread({\n      name,\n      email,\n      avatar_id,\n      password,\n      phone,\n      zipcode,\n      street,\n      number,\n      complement,\n      district,\n      city,\n      state\n    }, rest.oldPassword ? rest : {});\n\n    const response = yield call(api.put, 'users', profile);\n    toast.success('Perfil atualizado com sucesso!');\n    yield put(updateProfileSuccess(response.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar perfil, confira seus dados!');\n    yield put(updateProfileFailure());\n  }\n}\nexport default all([takeLatest('@user/UPDATE_PROFILE_REQUEST', updateProfile)]);","map":{"version":3,"sources":["/var/www/jackbarber/frontend/src/store/modules/user/sagas.js"],"names":["takeLatest","call","put","all","toast","api","updateProfileSuccess","updateProfileFailure","updateProfile","payload","data","name","email","avatar_id","phone","zipcode","street","number","complement","district","city","state","rest","profile","password","oldPassword","response","success","err","error"],"mappings":";;;;;;;AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,WAA3D;AAEA,OAAO,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AAC3C,MAAI;AAAA,0BAC4GA,OAAO,CAACC,IADpH;AAAA,UACKC,IADL,iBACKA,IADL;AAAA,UACWC,KADX,iBACWA,KADX;AAAA,UACkBC,SADlB,iBACkBA,SADlB;AAAA,UAC6BC,KAD7B,iBAC6BA,KAD7B;AAAA,UACoCC,OADpC,iBACoCA,OADpC;AAAA,UAC6CC,MAD7C,iBAC6CA,MAD7C;AAAA,UACqDC,MADrD,iBACqDA,MADrD;AAAA,UAC6DC,UAD7D,iBAC6DA,UAD7D;AAAA,UACyEC,QADzE,iBACyEA,QADzE;AAAA,UACmFC,IADnF,iBACmFA,IADnF;AAAA,UACyFC,KADzF,iBACyFA,KADzF;AAAA,UACmGC,IADnG;;AAGH,UAAMC,OAAO;AACZZ,MAAAA,IADY;AAEZC,MAAAA,KAFY;AAGZC,MAAAA,SAHY;AAIZW,MAAAA,QAJY;AAKZV,MAAAA,KALY;AAMZC,MAAAA,OANY;AAOZC,MAAAA,MAPY;AAQZC,MAAAA,MARY;AASZC,MAAAA,UATY;AAUZC,MAAAA,QAVY;AAWZC,MAAAA,IAXY;AAYZC,MAAAA;AAZY,OAcRC,IAAI,CAACG,WAAL,GAAmBH,IAAnB,GAA0B,EAdlB,CAAb;;AAiBA,UAAMI,QAAQ,GAAG,MAAMzB,IAAI,CAACI,GAAG,CAACH,GAAL,EAAU,OAAV,EAAmBqB,OAAnB,CAA3B;AAEAnB,IAAAA,KAAK,CAACuB,OAAN,CAAc,gCAAd;AAEA,UAAMzB,GAAG,CAACI,oBAAoB,CAACoB,QAAQ,CAAChB,IAAV,CAArB,CAAT;AACA,GAzBD,CAyBE,OAAOkB,GAAP,EAAY;AACbxB,IAAAA,KAAK,CAACyB,KAAN,CAAY,+CAAZ;AACA,UAAM3B,GAAG,CAACK,oBAAoB,EAArB,CAAT;AACA;AACD;AAED,eAAeJ,GAAG,CAAC,CAACH,UAAU,CAAC,8BAAD,EAAiCQ,aAAjC,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '~/services/api';\n\nimport { updateProfileSuccess, updateProfileFailure } from './actions';\n\nexport function* updateProfile({ payload }) {\n\ttry {\n\t\tconst { name, email, avatar_id, phone, zipcode, street, number, complement, district, city, state, ...rest } = payload.data;\n\n\t\tconst profile = {\n\t\t\tname,\n\t\t\temail,\n\t\t\tavatar_id,\n\t\t\tpassword,\n\t\t\tphone,\n\t\t\tzipcode,\n\t\t\tstreet,\n\t\t\tnumber,\n\t\t\tcomplement,\n\t\t\tdistrict,\n\t\t\tcity,\n\t\t\tstate,\n\n\t\t\t...(rest.oldPassword ? rest : {}),\n\t\t};\n\n\t\tconst response = yield call(api.put, 'users', profile);\n\n\t\ttoast.success('Perfil atualizado com sucesso!');\n\n\t\tyield put(updateProfileSuccess(response.data));\n\t} catch (err) {\n\t\ttoast.error('Erro ao atualizar perfil, confira seus dados!');\n\t\tyield put(updateProfileFailure());\n\t}\n}\n\nexport default all([takeLatest('@user/UPDATE_PROFILE_REQUEST', updateProfile)]);\n"]},"metadata":{},"sourceType":"module"}