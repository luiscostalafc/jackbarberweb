{"ast":null,"code":"import _defineProperty from \"/var/www/jackbarber/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/var/www/jackbarber/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/jackbarber/frontend/src/components/Notifications/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport socketio from 'socket.io-client';\nimport api from \"../../services/api\";\nimport { Container, Badge, NotificationList, Scroll, Notification } from './styles';\nexport default function Notifications() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        notifications = _useState4[0],\n        setNotifications = _useState4[1];\n\n  const hasUnread = useMemo(() => !!notifications.find(notification => notification.read === false), [notifications]);\n  const user = useSelector(state => state.user.profile);\n  const socket = useMemo(() => socketio('http://192.168.0.2:3333', {\n    query: {\n      user_id: user.id\n    }\n  }), [user.id]);\n  useEffect(() => {\n    socket.on('notification', notification => {\n      setNotifications([notification, ...notifications]);\n    });\n  }, [socket, notifications]);\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('notifications');\n      const data = response.data.map(notification => _objectSpread({}, notification, {\n        timeDistance: formatDistance(parseISO(notification.createdAt), new Date(), {\n          addSuffix: true,\n          locale: pt\n        })\n      }));\n      setNotifications(data);\n    }\n\n    loadNotifications();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handleMarkAsRead(id) {\n    await api.put(\"notifications/\".concat(id));\n    setNotifications(notifications.map(notification => notification._id === id ? _objectSpread({}, notification, {\n      read: true\n    }) : notification));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    onClick: handleToggleVisible,\n    hasUnread: hasUnread,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(MdNotifications, {\n    color: \"#ebb400\",\n    size: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(NotificationList, {\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Scroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, notifications.map(notification => React.createElement(Notification, {\n    key: notification._id,\n    unread: !notification.read,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, notification.content), React.createElement(\"time\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, notification.timeDistance), !notification.read && React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleMarkAsRead(notification._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Marcar como lida\"))))));\n}","map":{"version":3,"sources":["/var/www/jackbarber/frontend/src/components/Notifications/index.js"],"names":["React","useState","useEffect","useMemo","useSelector","MdNotifications","parseISO","formatDistance","pt","socketio","api","Container","Badge","NotificationList","Scroll","Notification","Notifications","visible","setVisible","notifications","setNotifications","hasUnread","find","notification","read","user","state","profile","socket","query","user_id","id","on","loadNotifications","response","get","data","map","timeDistance","createdAt","Date","addSuffix","locale","handleToggleVisible","handleMarkAsRead","put","_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport socketio from 'socket.io-client';\n\nimport api from '~/services/api';\n\nimport {\n\tContainer,\n\tBadge,\n\tNotificationList,\n\tScroll,\n\tNotification,\n} from './styles';\n\nexport default function Notifications() {\n\tconst [visible, setVisible] = useState(false);\n\tconst [notifications, setNotifications] = useState([]);\n\n\tconst hasUnread = useMemo(\n\t\t() => !!notifications.find(notification => notification.read === false),\n\t\t[notifications]\n\t);\n\n\tconst user = useSelector(state => state.user.profile);\n\n\tconst socket = useMemo(\n\t\t() =>\n\t\t\tsocketio('http://192.168.0.2:3333', {\n\t\t\t\tquery: {\n\t\t\t\t\tuser_id: user.id,\n\t\t\t\t},\n\t\t\t}),\n\t\t[user.id]\n\t);\n\n\tuseEffect(() => {\n\t\tsocket.on('notification', notification => {\n\t\t\tsetNotifications([notification, ...notifications]);\n\t\t});\n\t}, [socket, notifications]);\n\n\tuseEffect(() => {\n\t\tasync function loadNotifications() {\n\t\t\tconst response = await api.get('notifications');\n\n\t\t\tconst data = response.data.map(notification => ({\n\t\t\t\t...notification,\n\t\t\t\ttimeDistance: formatDistance(\n\t\t\t\t\tparseISO(notification.createdAt),\n\t\t\t\t\tnew Date(),\n\t\t\t\t\t{ addSuffix: true, locale: pt }\n\t\t\t\t),\n\t\t\t}));\n\n\t\t\tsetNotifications(data);\n\t\t}\n\n\t\tloadNotifications();\n\t}, []);\n\n\tfunction handleToggleVisible() {\n\t\tsetVisible(!visible);\n\t}\n\n\tasync function handleMarkAsRead(id) {\n\t\tawait api.put(`notifications/${id}`);\n\n\t\tsetNotifications(\n\t\t\tnotifications.map(notification =>\n\t\t\t\tnotification._id === id ? { ...notification, read: true } : notification\n\t\t\t)\n\t\t);\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Badge onClick={handleToggleVisible} hasUnread={hasUnread}>\n\t\t\t\t<MdNotifications color=\"#ebb400\" size={20} />\n\t\t\t</Badge>\n\n\t\t\t<NotificationList visible={visible}>\n\t\t\t\t<Scroll>\n\t\t\t\t\t{notifications.map(notification => (\n\t\t\t\t\t\t<Notification key={notification._id} unread={!notification.read}>\n\t\t\t\t\t\t\t<p>{notification.content}</p>\n\t\t\t\t\t\t\t<time>{notification.timeDistance}</time>\n\t\t\t\t\t\t\t{!notification.read && (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => handleMarkAsRead(notification._id)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tMarcar como lida\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Notification>\n\t\t\t\t\t))}\n\t\t\t\t</Scroll>\n\t\t\t</NotificationList>\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}